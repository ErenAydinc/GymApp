// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20230121134904_mig_3")]
    partial class mig_3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FirstName");

                    b.HasKey("Id");

                    b.ToTable("operationclaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BodyInformation.Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BodyInformation.Create"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BodyInformation.Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "BodyInformation.Delete"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BodyInformation.Read"
                        },
                        new
                        {
                            Id = 6,
                            Name = "MemberType.Admin"
                        },
                        new
                        {
                            Id = 7,
                            Name = "MemberType.Create"
                        },
                        new
                        {
                            Id = 8,
                            Name = "MemberType.Update"
                        },
                        new
                        {
                            Id = 9,
                            Name = "MemberType.Delete"
                        },
                        new
                        {
                            Id = 10,
                            Name = "MemberType.Read"
                        },
                        new
                        {
                            Id = 11,
                            Name = "OperationClaim.Admin"
                        },
                        new
                        {
                            Id = 12,
                            Name = "OperationClaim.Create"
                        },
                        new
                        {
                            Id = 13,
                            Name = "OperationClaim.Update"
                        },
                        new
                        {
                            Id = 14,
                            Name = "OperationClaim.Delete"
                        },
                        new
                        {
                            Id = 15,
                            Name = "OperationClaim.Read"
                        },
                        new
                        {
                            Id = 16,
                            Name = "UserOperationClaim.Admin"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UserOperationClaim.Create"
                        },
                        new
                        {
                            Id = 18,
                            Name = "UserOperationClaim.Update"
                        },
                        new
                        {
                            Id = 19,
                            Name = "UserOperationClaim.Delete"
                        },
                        new
                        {
                            Id = 20,
                            Name = "UserOperationClaim.Read"
                        },
                        new
                        {
                            Id = 21,
                            Name = "UserMemberTypeMapping.Admin"
                        },
                        new
                        {
                            Id = 22,
                            Name = "UserMemberTypeMapping.Create"
                        },
                        new
                        {
                            Id = 23,
                            Name = "UserMemberTypeMapping.Update"
                        },
                        new
                        {
                            Id = 24,
                            Name = "UserMemberTypeMapping.Delete"
                        },
                        new
                        {
                            Id = 25,
                            Name = "UserMemberTypeMapping.Read"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("longtext");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("int")
                        .HasColumnName("AuthenticatorType");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("PasswordSalt");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AuthenticatorType = 0,
                            Email = "gymapp@gymapp.com",
                            FirstName = "gymapp",
                            LastName = "gymapp",
                            PasswordHash = new byte[] { 97, 171, 89, 71, 204, 43, 25, 18, 99, 96, 216, 133, 160, 153, 64, 170, 139, 146, 203, 106, 218, 9, 172, 112, 99, 153, 76, 220, 127, 7, 223, 86, 109, 236, 109, 171, 43, 116, 124, 2, 151, 231, 12, 205, 236, 255, 9, 223, 98, 157, 134, 160, 104, 188, 199, 158, 200, 153, 209, 148, 138, 179, 69, 10 },
                            PasswordSalt = new byte[] { 210, 184, 75, 8, 48, 167, 174, 201, 189, 111, 36, 40, 142, 221, 134, 131, 138, 38, 137, 22, 169, 171, 74, 217, 97, 241, 251, 146, 107, 55, 174, 67, 16, 76, 26, 2, 63, 241, 45, 8, 124, 82, 228, 161, 101, 167, 103, 250, 183, 22, 244, 11, 93, 217, 137, 222, 27, 12, 187, 79, 220, 30, 34, 223, 70, 80, 36, 124, 112, 140, 156, 50, 69, 84, 177, 236, 73, 247, 229, 212, 96, 163, 36, 82, 84, 158, 131, 151, 165, 158, 179, 224, 95, 238, 190, 136, 24, 9, 117, 71, 58, 177, 140, 71, 237, 214, 198, 78, 222, 237, 87, 177, 53, 221, 73, 148, 79, 214, 196, 99, 204, 140, 199, 228, 197, 115, 48, 216 },
                            Status = true
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("useroperationclaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            OperationClaimId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            OperationClaimId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            OperationClaimId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            OperationClaimId = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            OperationClaimId = 6,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            OperationClaimId = 7,
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            OperationClaimId = 8,
                            UserId = 4
                        },
                        new
                        {
                            Id = 9,
                            OperationClaimId = 9,
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            OperationClaimId = 10,
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            OperationClaimId = 11,
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            OperationClaimId = 12,
                            UserId = 4
                        },
                        new
                        {
                            Id = 13,
                            OperationClaimId = 13,
                            UserId = 4
                        },
                        new
                        {
                            Id = 14,
                            OperationClaimId = 14,
                            UserId = 4
                        },
                        new
                        {
                            Id = 15,
                            OperationClaimId = 15,
                            UserId = 4
                        },
                        new
                        {
                            Id = 16,
                            OperationClaimId = 16,
                            UserId = 4
                        },
                        new
                        {
                            Id = 17,
                            OperationClaimId = 17,
                            UserId = 4
                        },
                        new
                        {
                            Id = 18,
                            OperationClaimId = 18,
                            UserId = 4
                        },
                        new
                        {
                            Id = 19,
                            OperationClaimId = 19,
                            UserId = 4
                        },
                        new
                        {
                            Id = 20,
                            OperationClaimId = 20,
                            UserId = 4
                        },
                        new
                        {
                            Id = 21,
                            OperationClaimId = 21,
                            UserId = 4
                        },
                        new
                        {
                            Id = 22,
                            OperationClaimId = 22,
                            UserId = 4
                        },
                        new
                        {
                            Id = 23,
                            OperationClaimId = 23,
                            UserId = 4
                        },
                        new
                        {
                            Id = 24,
                            OperationClaimId = 24,
                            UserId = 4
                        },
                        new
                        {
                            Id = 25,
                            OperationClaimId = 25,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.BodyInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Arm")
                        .HasColumnType("float");

                    b.Property<float>("Chest")
                        .HasColumnType("float");

                    b.Property<float>("Leg")
                        .HasColumnType("float");

                    b.Property<float>("Length")
                        .HasColumnType("float");

                    b.Property<float>("Shoulder")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("BodyInformations");
                });

            modelBuilder.Entity("Domain.Entities.MemberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MemberTypes");
                });

            modelBuilder.Entity("Domain.MappingEntities.UserMemberTypeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMemberTypeMappings");
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.MappingEntities.UserMemberTypeMapping", b =>
                {
                    b.HasOne("Domain.Entities.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
